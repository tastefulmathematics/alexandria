Relatability with equivalence relation criteria
Definition of an equivalence relation
Labeled/unlabeled graphs
Definition of a group
Symmetric groups and dihedral groups
Definition of a group action
Revisit symmetric and dihedral groups
Apply group actions as equivalence relations
Revisit labeled/unlabeled graphs

It is odd to talk about the equivalence relation.  It is a simple, technical concept.  A tool to provide rigour to the foundation of arguments.  It isnt very useful outside of formal arguments, and even there people wont necessarily dwell on it for very long.  On the other hand, a surprising number of people will reference the concept casually, if erroneously.  
The equivalence relation is purely on the level of sets, and sets are boring.  So instead let us consider the integers.  There are many integers, so instead we try to find a smaller set with which to work.  To do this, we pick a number (5) and declare that two integers are equivalent provided that the remainder after division by that number (5) are equal.  For some examples: 13 is equal to 2x5 + 3, so the remainder is 3.  18 is equal to 3x5 + 3, so the remainder is 3.  Since 3 is equal to 3, we say that 13 is equivalent to 18.  A few more examples demonstrates that this approach is very tedious, so instead we compute the remainders and then collect integers which are equivalent.  These collections are called equivalence classes.
To this point, this construction is little more than an elaborate way to write the numbers 0 ,1,2,3,4.  The real value of this construction is that it is compatible with usual integer arithmetic.  There is no way of adding a collection of integers to a collection of integers, so we must define one.  To add two equivalence classes, take any element from the first class and add it to any element of the second class.  The sum will be an integer, and thus belongs to one of the equivalence classes.  Before continuing, we must first check to make sure this definition isnt complete nonsense.  After all, if choosing different representatives from the equivalence classes produce a different answer, then this definition would be complete nonsense.  
A simple way to check is to write the two representatives  in a general form and add.  From this, it would be sufficient to simply choose the usual representatives for each class and perform the computation.  Multiplication of equivalence classes can be defined in a similar way, and the calculations proceed to a similar effect.  It should be apparent from these compuations that there was nothing special about the number 5.  Given any number n, we can perform the same procedure.  There will be more equivalence classes, but the consistent arithmetic remains.  This construction is called Modular Arithmetic, and it has far more uses than can be covered in one video.  A simple use is with poynomial equations.  Given a polynomial with integer coefficients, a natural question is whether there are integer values that will evaluate to 0.  If there are no such roots when computing modulo a fixed number n, then it can be concluded that there are no roots over all the integers.
	Before moving on to other equivalence relations, there are a few parting notes for modular arithemtic.  First, though addition, subtraction and multiplication are consistent with their integer counterparts, other forms of arithmetic are not as straightforward.  Division is defined as the inverse of multiplication.  This has the advantage that the result will be an equivalence class, but at the expense that it will not be consistent with the integer division.  Further, there are instances where equivalence classes will not have multiplicative inverses, so division is not possible at all.  Going further, though exponentiation is again straight forward, logarithms and kth roots are quite complicated.  In fact, there are separate encryption algorithms based on the difficulty of these operations.
	The second note regards finding solutions to polynomial equations.  Though finding a solution modulo 5 will not guarantee a solution over the integers, there is the thought to attempt to find a solution for all possible modular values.  Though this specific idea is unsuccessful, a variation on this idea has proven quite frutful.  Unfortunately, cryptography and local/global principles will ahve to wait for other videos.  We return to equivalence relations.
	The idea of an equivalence relation - that is, collecting elements of a set into equivalence classes and then working with the classes instead - is ubiquitous in mathematics.  Consider the set of graphs on four vertices.  There are four vertices, allowing for six possible edges.  Each edge creates a binary choice (shall we include this edge or not), creating 2^6 = 64 graphs.  Unfortunately, this number is wildly too high.
	The issue is that we did not count graphs, but rather labeled graphs.  If two graphs have the same pattern of edges and vertices, but the vertices happen to be labeled differently, then teh graphs are considered different.  What we would actaully like to consider are equivalence classes lof labeled graphs with the same structure but different labelings.  Alternatively, we would like to collect the graphs where the vertex labels are permutations of one another.  Since we are dealing with permutations of four letters, we are going to need the symmetric group on four letters.
	A permutation of four letters describes how to rearrange four things.  It can permute all four things, just one, or even none at all.  It can even permute the items in two sets of two, which is nice.  One way of denoting a permutation is by listing where each element is permuted to. 1 goes to 2, 2 goes to 1. 1 goes to 2, 2 goes to 3, 3 goes to 4, 4 goes to 1.  1 to 2, 3 to 4 and back again.  The vertices of our graphs are labeled with 4 letters, and applying a permutation to a labeled graph yields another labeled graph.  We can collect graphs that are can be permuted to one another, and we have the desired unlabeled graphs.
	This is a good moment to present some definitions.  The symmetric group on 4 letters is an example of a group.  A group is a set of elements with an operation between them.  It is must be associative, which means that for complicated expressions, parentheses are irrelevant.  There are three remaining requirements a group: first, there is an identity element such that it times any element has no effect; second, every element must have an inverse, an element such that the product is the identity element; and third, if two elements are in the group, their product is in the group.  The symmetric group of 4 letters being applied to the set of labeled graphs on 4 vertices is an example of a group action.  When each element of a group can be applied to each any element of a set to produce another element of that set, we say the group acts on the set.  There is a further requirement that, if two elements are applied successively to an element, the outcome should be the same as if the two elements were first multiplied, and the resulting group element applied to the set element.  Finally, the collection of all set elements obtained by the group action is called an orbit.
	At this point, there should be a question about how an equivalence relation and a group action compare.  It turns out that every group action creates an equivalence relation by declaring that two set elements are equivalent provided that there is an group element which takes the first element to the second.  The criteria for the equivalence relation correspond to the criteria for a group.  The relation is symmetric because the group has an identity element.  The relation is reflexive because every group element has an inverse.  And the relation is transitve because the product of two group elements is again a group element.  Accordingly, the orbit of a group action is an equivalence class, we expected.
	There are practical benefits to using group action to represent an equivalence relation.  For the example at hand, the symmetric group on 4 letters has structure that can be used to count the number of unlabeled graphs on four vertices.

